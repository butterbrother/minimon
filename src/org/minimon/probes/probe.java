/*
* Copyright (c) 2014, Oleg Bobukh
* MIT License, http://opensource.org/licenses/mit-license.php
* with classpath restrictions.
*
* Данная лицензия разрешает лицам, получившим копию данного
* программного обеспечения и сопутствующей документации
* (в дальнейшем именуемыми «Программное Обеспечение»),
* безвозмездно использовать Программное Обеспечение
* без ограничений, включая неограниченное право на
* использование, копирование, изменение, добавление,
* публикацию, распространение, сублицензирование и/или
* продажу копий Программного Обеспечения, а также лицам,
* которым предоставляется данное Программное Обеспечение,
* при соблюдении следующих условий:
*
* Указанное выше уведомление об авторском праве и данные
* условия должны быть включены во все копии или значимые
* части данного Программного Обеспечения.
*
* ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ «КАК ЕСТЬ»,
* БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ, ЯВНО ВЫРАЖЕННЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ,
* ВКЛЮЧАЯ ГАРАНТИИ ТОВАРНОЙ ПРИГОДНОСТИ, СООТВЕТСТВИЯ ПО ЕГО
* КОНКРЕТНОМУ НАЗНАЧЕНИЮ И ОТСУТСТВИЯ НАРУШЕНИЙ, НО НЕ
* ОГРАНИЧИВАЯСЬ ИМИ. НИ В КАКОМ СЛУЧАЕ АВТОРЫ ИЛИ
* ПРАВООБЛАДАТЕЛИ НЕ НЕСУТ ОТВЕТСТВЕННОСТИ ПО КАКИМ-ЛИБО
* ИСКАМ, ЗА УЩЕРБ ИЛИ ПО ИНЫМ ТРЕБОВАНИЯМ, В ТОМ ЧИСЛЕ, ПРИ
* ДЕЙСТВИИ КОНТРАКТА, ДЕЛИКТЕ ИЛИ ИНОЙ СИТУАЦИИ, ВОЗНИКШИМ ИЗ-ЗА
* ИСПОЛЬЗОВАНИЯ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ ИЛИ ИНЫХ ДЕЙСТВИЙ
* С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ..
*/

package org.minimon.probes;

import org.minimon.core.logger;

import java.util.LinkedHashMap;

/**
 * Общий интерфейс для всех тестов
 */
public interface probe {
    /**
     * Импорт настроек из считывателя (ini-файла)
     * Выполняется в первую очередь
     *
     * @param settings Настройки в виде вложенной LinkedHashMap
     */
    public void importSettings(LinkedHashMap<String, LinkedHashMap<String, String>> settings);

    /**
     * Выполняет подготовку готовности
     * Проверяет наличие всех необходимых компонентов
     * Парсит входные параметры, определяя их пригодность
     * и отсутствие ошибок
     *
     * @param log Ссылка на текущий логгер
     * @return Готовность. По итогу этого флага будет
     * определено, будет ли запущена проверка
     * Если не готово - в getLastError должна быть
     * причина неготовности
     */
    public boolean prepare(logger log, boolean debugState);

    /**
     * Возвращает последнюю ошибку.
     * Как при подготовке, так и при проверке
     *
     * @return Последняя ошибка
     */
    public String getLastError();

    /**
     * Выполняет непосредственно проверку
     * В случае неудачной проверки сообщение об ошибке
     * берётся из getLastError
     * Сама проверка пишет в лог только отладочные сообщения
     *
     * @return Результат проверки
     */
    public boolean iteration();

    /**
     * Возвращает цель трассировки, ip либо url
     * либо null, если не требуется
     *
     * @return Цель трассировки
     */
    public String getTracerouteTarget();

    /**
     * Возвращает тип проверки
     *
     * @return Тип проверки
     */
    public String getCheckType();

    /**
     * Возвращает вспомогательный класс, определяющий параметры
     *
     * @return helper
     */
    public helper getBasicalParseHelper();
}
