/*
* Copyright (c) 2014, Oleg Bobukh
* MIT License, http://opensource.org/licenses/mit-license.php
* with classpath restrictions.
*
* Данная лицензия разрешает лицам, получившим копию данного
* программного обеспечения и сопутствующей документации
* (в дальнейшем именуемыми «Программное Обеспечение»),
* безвозмездно использовать Программное Обеспечение
* без ограничений, включая неограниченное право на
* использование, копирование, изменение, добавление,
* публикацию, распространение, сублицензирование и/или
* продажу копий Программного Обеспечения, а также лицам,
* которым предоставляется данное Программное Обеспечение,
* при соблюдении следующих условий:
*
* Указанное выше уведомление об авторском праве и данные
* условия должны быть включены во все копии или значимые
* части данного Программного Обеспечения.
*
* ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ «КАК ЕСТЬ»,
* БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ, ЯВНО ВЫРАЖЕННЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ,
* ВКЛЮЧАЯ ГАРАНТИИ ТОВАРНОЙ ПРИГОДНОСТИ, СООТВЕТСТВИЯ ПО ЕГО
* КОНКРЕТНОМУ НАЗНАЧЕНИЮ И ОТСУТСТВИЯ НАРУШЕНИЙ, НО НЕ
* ОГРАНИЧИВАЯСЬ ИМИ. НИ В КАКОМ СЛУЧАЕ АВТОРЫ ИЛИ
* ПРАВООБЛАДАТЕЛИ НЕ НЕСУТ ОТВЕТСТВЕННОСТИ ПО КАКИМ-ЛИБО
* ИСКАМ, ЗА УЩЕРБ ИЛИ ПО ИНЫМ ТРЕБОВАНИЯМ, В ТОМ ЧИСЛЕ, ПРИ
* ДЕЙСТВИИ КОНТРАКТА, ДЕЛИКТЕ ИЛИ ИНОЙ СИТУАЦИИ, ВОЗНИКШИМ ИЗ-ЗА
* ИСПОЛЬЗОВАНИЯ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ ИЛИ ИНЫХ ДЕЙСТВИЙ
* С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ..
*/

package org.minimon.core;

import java.io.File;

/**
 * Пытается исправить права на запись файла
 * Так же пытается исправить права на запись вышестоящей директории
 */
public class fileFixPerm {
    static boolean tryFixFilePerm(String filename) {
        try {
            // Получаем файл и вышестоящую директорию
            File fixFile = new File(filename);
            File upLevelDirectory = fixFile.getParentFile();

            // Вначале проверяем и восстанавливаем права вышестоящей директории
            // Проверяем само наличие вышестоящей директории
            if (!upLevelDirectory.exists()) return false;
            // Пытаемся восстановить права, игнорируем возврат
            if (!upLevelDirectory.canRead())
                upLevelDirectory.setReadable(true, true);
            if (!upLevelDirectory.canWrite())
                upLevelDirectory.setWritable(true, true);

            // Далее проверяем и пытемся восстановить права вышестоящего файла
            // Проверяем само наличие вышестоящего файла
            if (!fixFile.exists()) return false;
            // Пытаемся восстановить права, на этот раз
            // любой отказ воспринимается как неудача и в этом виде возвращается
            if (!fixFile.canRead())
                if (!fixFile.setReadable(true, true)) return false;
            if (!fixFile.canWrite())
                if (!fixFile.setWritable(true, true)) return false;
            return true;
        } catch (Exception ignore) {
            // Любое исключение ввода-вывода воспринимается как отказ
            return false;
        }
    }
}
